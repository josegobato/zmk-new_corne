#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// Source desired key-position labels
#include "zmk-helpers/key-labels/eyelash42.h"

/* Layers */
#define QWERTY  0
#define RAISE   1
#define LOWER   2
#define SYS     3

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 LT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {
    behaviors {

        td0: td_tog_layer_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo RAISE>, <&tog RAISE>;
        };

        td1: td_tog_layer_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&tog LOWER>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <RAISE LOWER>;
            then-layer = <SYS>;
        };
    };
    
    combos {
        compatible = "zmk,combos";
        combo_minus {
            timeout-ms = <50>;
            key-positions = <LT1 LT2>;
            layers = <0>;
            bindings = <&kp MINUS>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <RT1 RT2>;
            layers = <0>;
            bindings = <&kp EQUAL>;
        };

        combo_left_brackets {
            timeout-ms = <50>;
            key-positions = <LM1 LT2>;
            layers = <QWERTY, RAISE>;
            bindings = <&kp LBKT>;
        };

        combo_right_brackets {
            timeout-ms = <50>;
            key-positions = <RM1 RT2>;
            layers = <QWERTY, RAISE>;
            bindings = <&kp RBKT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <

                &gresc    &kp Q       &kp W        &kp E         &kp R       &kp T                            &kp UP                &kp Y      &kp U       &kp I             &kp O          &kp P          &kp BSPC
                &kp TAB   &hml LGUI A &hml LCTRL S &hml LSHIFT D &hml LALT F &kp G                  &kp LEFT  &kp ENTER  &kp RIGHT  &kp H      &hmr LALT J &hmr RSHIFT K     &hmr RCTRL L   &hmr RGUI SEMI &kp SQT
                &none     &kp Z       &kp X        &kp C         &kp V       &kp B     &kp SPACE              &kp DOWN              &kp N      &kp M       &kp COMMA         &kp DOT        &kp FSLH       &none
                                                   &none         &td1        &kp SPACE                                              &kp ENTER  &td0        &none

            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        raise_layer {
            display-name = "NUMBER";
            bindings = <

                &trans    &kp N1    &kp N2     &kp  N3     &kp N4   &kp N5                                    &mmv MOVE_UP                     &kp N6  &kp N7     &kp N8  &kp N9  &kp N0  &kp BSPC
                &kp DEL   &kp LEFT  &kp DOWN   &kp  RIGHT  &kp UP   &trans                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans  &trans     &trans  &trans  &trans  &kp BSLH
                &kp INS   &kp HOME  &kp PG_UP  &kp  PG_DN  &kp END  &trans  &kp C_MUTE                        &mmv MOVE_DOWN                   &trans  &kp K_APP  &trans  &trans  &trans  &trans
                                                           &trans   &trans  &trans                                                             &trans  &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        lower_layer {
            display-name = "FN";
            bindings = <

                &trans   &kp F1          &kp F2          &kp F3           &kp F4          &kp F5                                    &mmv MOVE_UP                     &kp F6  &kp F7    &kp F8  &kp F9  &kp F10 &kp BSPC
                &kp DEL  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv MOVE_UP    &trans                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans  &mkp MB1  &trans  &trans  &trans  &kp BSLH
                &trans   &msc SCRL_UP    &trans          &trans           &msc SCRL_DOWN  &trans  &kp C_MUTE                        &mmv MOVE_DOWN                   &trans  &mkp MB2  &trans  &trans  &trans  &trans
                                                         &trans           &trans          &trans                                                                     &trans  &trans    &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        bt_rgb_layer {
            display-name = "BT/RGB";
            bindings = <
                &studio_unlock  &out OUT_USB     &out OUT_BLE    &sys_reset    &trans        &bootloader                                    &mmv MOVE_UP                     &sys_reset       &trans           &bootloader      &trans           &trans  &kp BSPC
                &bt BT_CLR      &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                    &mmv MOVE_LEFT &mkp LCLK       &mmv MOVE_RIGHT  &trans           &trans           &trans           &trans           &trans  &trans
                &trans          &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans  &trans
                                                 &trans          &trans        &trans                                                                                        &trans           &trans           &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
